
Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004cc  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006a8  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ccf  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initIO>:


#define LED PB5 // LED is on Pin 13 or Pin 5 of Port B

void initIO(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
DDRB |= (1<<LED);
  74:	87 e3       	ldi	r24, 0x37	; 55
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	27 e3       	ldi	r18, 0x37	; 55
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	20 62       	ori	r18, 0x20	; 32
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <main>:


int main(void)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	6c 97       	sbiw	r28, 0x1c	; 28
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
  initIO();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <initIO>

  while (1)
  {
   PORTB |= (1<<LED); // set
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	28 e3       	ldi	r18, 0x38	; 56
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	20 81       	ld	r18, Z
  b0:	20 62       	ori	r18, 0x20	; 32
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	aa e7       	ldi	r26, 0x7A	; 122
  bc:	b4 e4       	ldi	r27, 0x44	; 68
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	9a 83       	std	Y+2, r25	; 0x02
  c2:	ab 83       	std	Y+3, r26	; 0x03
  c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	4a e7       	ldi	r20, 0x7A	; 122
  cc:	53 e4       	ldi	r21, 0x43	; 67
  ce:	69 81       	ldd	r22, Y+1	; 0x01
  d0:	7a 81       	ldd	r23, Y+2	; 0x02
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	9c 81       	ldd	r25, Y+4	; 0x04
  d6:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
  da:	dc 01       	movw	r26, r24
  dc:	cb 01       	movw	r24, r22
  de:	8d 83       	std	Y+5, r24	; 0x05
  e0:	9e 83       	std	Y+6, r25	; 0x06
  e2:	af 83       	std	Y+7, r26	; 0x07
  e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	40 e8       	ldi	r20, 0x80	; 128
  ec:	5f e3       	ldi	r21, 0x3F	; 63
  ee:	6d 81       	ldd	r22, Y+5	; 0x05
  f0:	7e 81       	ldd	r23, Y+6	; 0x06
  f2:	8f 81       	ldd	r24, Y+7	; 0x07
  f4:	98 85       	ldd	r25, Y+8	; 0x08
  f6:	0e 94 49 01 	call	0x292	; 0x292 <__cmpsf2>
  fa:	88 23       	and	r24, r24
  fc:	2c f4       	brge	.+10     	; 0x108 <main+0x7c>
		__ticks = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	9a 87       	std	Y+10, r25	; 0x0a
 104:	89 87       	std	Y+9, r24	; 0x09
 106:	3f c0       	rjmp	.+126    	; 0x186 <main+0xfa>
	else if (__tmp > 65535)
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	3f ef       	ldi	r19, 0xFF	; 255
 10c:	4f e7       	ldi	r20, 0x7F	; 127
 10e:	57 e4       	ldi	r21, 0x47	; 71
 110:	6d 81       	ldd	r22, Y+5	; 0x05
 112:	7e 81       	ldd	r23, Y+6	; 0x06
 114:	8f 81       	ldd	r24, Y+7	; 0x07
 116:	98 85       	ldd	r25, Y+8	; 0x08
 118:	0e 94 ca 01 	call	0x394	; 0x394 <__gesf2>
 11c:	18 16       	cp	r1, r24
 11e:	4c f5       	brge	.+82     	; 0x172 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e2       	ldi	r20, 0x20	; 32
 126:	51 e4       	ldi	r21, 0x41	; 65
 128:	69 81       	ldd	r22, Y+1	; 0x01
 12a:	7a 81       	ldd	r23, Y+2	; 0x02
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	9c 81       	ldd	r25, Y+4	; 0x04
 130:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 134:	dc 01       	movw	r26, r24
 136:	cb 01       	movw	r24, r22
 138:	bc 01       	movw	r22, r24
 13a:	cd 01       	movw	r24, r26
 13c:	0e 94 4e 01 	call	0x29c	; 0x29c <__fixunssfsi>
 140:	dc 01       	movw	r26, r24
 142:	cb 01       	movw	r24, r22
 144:	9a 87       	std	Y+10, r25	; 0x0a
 146:	89 87       	std	Y+9, r24	; 0x09
 148:	0f c0       	rjmp	.+30     	; 0x168 <main+0xdc>
 14a:	89 e1       	ldi	r24, 0x19	; 25
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9c 87       	std	Y+12, r25	; 0x0c
 150:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	8b 85       	ldd	r24, Y+11	; 0x0b
 154:	9c 85       	ldd	r25, Y+12	; 0x0c
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0xca>
 15a:	9c 87       	std	Y+12, r25	; 0x0c
 15c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	89 85       	ldd	r24, Y+9	; 0x09
 160:	9a 85       	ldd	r25, Y+10	; 0x0a
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	9a 87       	std	Y+10, r25	; 0x0a
 166:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 168:	89 85       	ldd	r24, Y+9	; 0x09
 16a:	9a 85       	ldd	r25, Y+10	; 0x0a
 16c:	89 2b       	or	r24, r25
 16e:	69 f7       	brne	.-38     	; 0x14a <main+0xbe>
 170:	14 c0       	rjmp	.+40     	; 0x19a <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 172:	6d 81       	ldd	r22, Y+5	; 0x05
 174:	7e 81       	ldd	r23, Y+6	; 0x06
 176:	8f 81       	ldd	r24, Y+7	; 0x07
 178:	98 85       	ldd	r25, Y+8	; 0x08
 17a:	0e 94 4e 01 	call	0x29c	; 0x29c <__fixunssfsi>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	9a 87       	std	Y+10, r25	; 0x0a
 184:	89 87       	std	Y+9, r24	; 0x09
 186:	89 85       	ldd	r24, Y+9	; 0x09
 188:	9a 85       	ldd	r25, Y+10	; 0x0a
 18a:	9e 87       	std	Y+14, r25	; 0x0e
 18c:	8d 87       	std	Y+13, r24	; 0x0d
 18e:	8d 85       	ldd	r24, Y+13	; 0x0d
 190:	9e 85       	ldd	r25, Y+14	; 0x0e
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x106>
 196:	9e 87       	std	Y+14, r25	; 0x0e
 198:	8d 87       	std	Y+13, r24	; 0x0d
   _delay_ms(1000);
   PORTB &= ~(1<<LED); // clear
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	28 e3       	ldi	r18, 0x38	; 56
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2f 7d       	andi	r18, 0xDF	; 223
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	aa e7       	ldi	r26, 0x7A	; 122
 1b2:	b4 e4       	ldi	r27, 0x44	; 68
 1b4:	8f 87       	std	Y+15, r24	; 0x0f
 1b6:	98 8b       	std	Y+16, r25	; 0x10
 1b8:	a9 8b       	std	Y+17, r26	; 0x11
 1ba:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	4a e7       	ldi	r20, 0x7A	; 122
 1c2:	53 e4       	ldi	r21, 0x43	; 67
 1c4:	6f 85       	ldd	r22, Y+15	; 0x0f
 1c6:	78 89       	ldd	r23, Y+16	; 0x10
 1c8:	89 89       	ldd	r24, Y+17	; 0x11
 1ca:	9a 89       	ldd	r25, Y+18	; 0x12
 1cc:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 1d0:	dc 01       	movw	r26, r24
 1d2:	cb 01       	movw	r24, r22
 1d4:	8b 8b       	std	Y+19, r24	; 0x13
 1d6:	9c 8b       	std	Y+20, r25	; 0x14
 1d8:	ad 8b       	std	Y+21, r26	; 0x15
 1da:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	6b 89       	ldd	r22, Y+19	; 0x13
 1e6:	7c 89       	ldd	r23, Y+20	; 0x14
 1e8:	8d 89       	ldd	r24, Y+21	; 0x15
 1ea:	9e 89       	ldd	r25, Y+22	; 0x16
 1ec:	0e 94 49 01 	call	0x292	; 0x292 <__cmpsf2>
 1f0:	88 23       	and	r24, r24
 1f2:	2c f4       	brge	.+10     	; 0x1fe <main+0x172>
		__ticks = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	98 8f       	std	Y+24, r25	; 0x18
 1fa:	8f 8b       	std	Y+23, r24	; 0x17
 1fc:	3f c0       	rjmp	.+126    	; 0x27c <main+0x1f0>
	else if (__tmp > 65535)
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	3f ef       	ldi	r19, 0xFF	; 255
 202:	4f e7       	ldi	r20, 0x7F	; 127
 204:	57 e4       	ldi	r21, 0x47	; 71
 206:	6b 89       	ldd	r22, Y+19	; 0x13
 208:	7c 89       	ldd	r23, Y+20	; 0x14
 20a:	8d 89       	ldd	r24, Y+21	; 0x15
 20c:	9e 89       	ldd	r25, Y+22	; 0x16
 20e:	0e 94 ca 01 	call	0x394	; 0x394 <__gesf2>
 212:	18 16       	cp	r1, r24
 214:	4c f5       	brge	.+82     	; 0x268 <main+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e2       	ldi	r20, 0x20	; 32
 21c:	51 e4       	ldi	r21, 0x41	; 65
 21e:	6f 85       	ldd	r22, Y+15	; 0x0f
 220:	78 89       	ldd	r23, Y+16	; 0x10
 222:	89 89       	ldd	r24, Y+17	; 0x11
 224:	9a 89       	ldd	r25, Y+18	; 0x12
 226:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3>
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	0e 94 4e 01 	call	0x29c	; 0x29c <__fixunssfsi>
 236:	dc 01       	movw	r26, r24
 238:	cb 01       	movw	r24, r22
 23a:	98 8f       	std	Y+24, r25	; 0x18
 23c:	8f 8b       	std	Y+23, r24	; 0x17
 23e:	0f c0       	rjmp	.+30     	; 0x25e <main+0x1d2>
 240:	89 e1       	ldi	r24, 0x19	; 25
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	9a 8f       	std	Y+26, r25	; 0x1a
 246:	89 8f       	std	Y+25, r24	; 0x19
 248:	89 8d       	ldd	r24, Y+25	; 0x19
 24a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x1c0>
 250:	9a 8f       	std	Y+26, r25	; 0x1a
 252:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	8f 89       	ldd	r24, Y+23	; 0x17
 256:	98 8d       	ldd	r25, Y+24	; 0x18
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	98 8f       	std	Y+24, r25	; 0x18
 25c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25e:	8f 89       	ldd	r24, Y+23	; 0x17
 260:	98 8d       	ldd	r25, Y+24	; 0x18
 262:	89 2b       	or	r24, r25
 264:	69 f7       	brne	.-38     	; 0x240 <main+0x1b4>
 266:	14 c0       	rjmp	.+40     	; 0x290 <main+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 268:	6b 89       	ldd	r22, Y+19	; 0x13
 26a:	7c 89       	ldd	r23, Y+20	; 0x14
 26c:	8d 89       	ldd	r24, Y+21	; 0x15
 26e:	9e 89       	ldd	r25, Y+22	; 0x16
 270:	0e 94 4e 01 	call	0x29c	; 0x29c <__fixunssfsi>
 274:	dc 01       	movw	r26, r24
 276:	cb 01       	movw	r24, r22
 278:	98 8f       	std	Y+24, r25	; 0x18
 27a:	8f 8b       	std	Y+23, r24	; 0x17
 27c:	8f 89       	ldd	r24, Y+23	; 0x17
 27e:	98 8d       	ldd	r25, Y+24	; 0x18
 280:	9c 8f       	std	Y+28, r25	; 0x1c
 282:	8b 8f       	std	Y+27, r24	; 0x1b
 284:	8b 8d       	ldd	r24, Y+27	; 0x1b
 286:	9c 8d       	ldd	r25, Y+28	; 0x1c
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x1fc>
 28c:	9c 8f       	std	Y+28, r25	; 0x1c
 28e:	8b 8f       	std	Y+27, r24	; 0x1b
   _delay_ms(1000);
  }
 290:	09 cf       	rjmp	.-494    	; 0xa4 <main+0x18>

00000292 <__cmpsf2>:
 292:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fp_cmp>
 296:	08 f4       	brcc	.+2      	; 0x29a <__cmpsf2+0x8>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret

0000029c <__fixunssfsi>:
 29c:	0e 94 a9 01 	call	0x352	; 0x352 <__fp_splitA>
 2a0:	88 f0       	brcs	.+34     	; 0x2c4 <__fixunssfsi+0x28>
 2a2:	9f 57       	subi	r25, 0x7F	; 127
 2a4:	98 f0       	brcs	.+38     	; 0x2cc <__fixunssfsi+0x30>
 2a6:	b9 2f       	mov	r27, r25
 2a8:	99 27       	eor	r25, r25
 2aa:	b7 51       	subi	r27, 0x17	; 23
 2ac:	b0 f0       	brcs	.+44     	; 0x2da <__fixunssfsi+0x3e>
 2ae:	e1 f0       	breq	.+56     	; 0x2e8 <__fixunssfsi+0x4c>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	1a f0       	brmi	.+6      	; 0x2c0 <__fixunssfsi+0x24>
 2ba:	ba 95       	dec	r27
 2bc:	c9 f7       	brne	.-14     	; 0x2b0 <__fixunssfsi+0x14>
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <__fixunssfsi+0x4c>
 2c0:	b1 30       	cpi	r27, 0x01	; 1
 2c2:	91 f0       	breq	.+36     	; 0x2e8 <__fixunssfsi+0x4c>
 2c4:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_zero>
 2c8:	b1 e0       	ldi	r27, 0x01	; 1
 2ca:	08 95       	ret
 2cc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__fp_zero>
 2d0:	67 2f       	mov	r22, r23
 2d2:	78 2f       	mov	r23, r24
 2d4:	88 27       	eor	r24, r24
 2d6:	b8 5f       	subi	r27, 0xF8	; 248
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <__fixunssfsi+0x4c>
 2da:	b9 3f       	cpi	r27, 0xF9	; 249
 2dc:	cc f3       	brlt	.-14     	; 0x2d0 <__fixunssfsi+0x34>
 2de:	86 95       	lsr	r24
 2e0:	77 95       	ror	r23
 2e2:	67 95       	ror	r22
 2e4:	b3 95       	inc	r27
 2e6:	d9 f7       	brne	.-10     	; 0x2de <__fixunssfsi+0x42>
 2e8:	3e f4       	brtc	.+14     	; 0x2f8 <__fixunssfsi+0x5c>
 2ea:	90 95       	com	r25
 2ec:	80 95       	com	r24
 2ee:	70 95       	com	r23
 2f0:	61 95       	neg	r22
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8f 4f       	sbci	r24, 0xFF	; 255
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__fp_cmp>:
 2fa:	99 0f       	add	r25, r25
 2fc:	00 08       	sbc	r0, r0
 2fe:	55 0f       	add	r21, r21
 300:	aa 0b       	sbc	r26, r26
 302:	e0 e8       	ldi	r30, 0x80	; 128
 304:	fe ef       	ldi	r31, 0xFE	; 254
 306:	16 16       	cp	r1, r22
 308:	17 06       	cpc	r1, r23
 30a:	e8 07       	cpc	r30, r24
 30c:	f9 07       	cpc	r31, r25
 30e:	c0 f0       	brcs	.+48     	; 0x340 <__fp_cmp+0x46>
 310:	12 16       	cp	r1, r18
 312:	13 06       	cpc	r1, r19
 314:	e4 07       	cpc	r30, r20
 316:	f5 07       	cpc	r31, r21
 318:	98 f0       	brcs	.+38     	; 0x340 <__fp_cmp+0x46>
 31a:	62 1b       	sub	r22, r18
 31c:	73 0b       	sbc	r23, r19
 31e:	84 0b       	sbc	r24, r20
 320:	95 0b       	sbc	r25, r21
 322:	39 f4       	brne	.+14     	; 0x332 <__fp_cmp+0x38>
 324:	0a 26       	eor	r0, r26
 326:	61 f0       	breq	.+24     	; 0x340 <__fp_cmp+0x46>
 328:	23 2b       	or	r18, r19
 32a:	24 2b       	or	r18, r20
 32c:	25 2b       	or	r18, r21
 32e:	21 f4       	brne	.+8      	; 0x338 <__fp_cmp+0x3e>
 330:	08 95       	ret
 332:	0a 26       	eor	r0, r26
 334:	09 f4       	brne	.+2      	; 0x338 <__fp_cmp+0x3e>
 336:	a1 40       	sbci	r26, 0x01	; 1
 338:	a6 95       	lsr	r26
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	81 1d       	adc	r24, r1
 33e:	81 1d       	adc	r24, r1
 340:	08 95       	ret

00000342 <__fp_split3>:
 342:	57 fd       	sbrc	r21, 7
 344:	90 58       	subi	r25, 0x80	; 128
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	59 f0       	breq	.+22     	; 0x362 <__fp_splitA+0x10>
 34c:	5f 3f       	cpi	r21, 0xFF	; 255
 34e:	71 f0       	breq	.+28     	; 0x36c <__fp_splitA+0x1a>
 350:	47 95       	ror	r20

00000352 <__fp_splitA>:
 352:	88 0f       	add	r24, r24
 354:	97 fb       	bst	r25, 7
 356:	99 1f       	adc	r25, r25
 358:	61 f0       	breq	.+24     	; 0x372 <__fp_splitA+0x20>
 35a:	9f 3f       	cpi	r25, 0xFF	; 255
 35c:	79 f0       	breq	.+30     	; 0x37c <__fp_splitA+0x2a>
 35e:	87 95       	ror	r24
 360:	08 95       	ret
 362:	12 16       	cp	r1, r18
 364:	13 06       	cpc	r1, r19
 366:	14 06       	cpc	r1, r20
 368:	55 1f       	adc	r21, r21
 36a:	f2 cf       	rjmp	.-28     	; 0x350 <__fp_split3+0xe>
 36c:	46 95       	lsr	r20
 36e:	f1 df       	rcall	.-30     	; 0x352 <__fp_splitA>
 370:	08 c0       	rjmp	.+16     	; 0x382 <__fp_splitA+0x30>
 372:	16 16       	cp	r1, r22
 374:	17 06       	cpc	r1, r23
 376:	18 06       	cpc	r1, r24
 378:	99 1f       	adc	r25, r25
 37a:	f1 cf       	rjmp	.-30     	; 0x35e <__fp_splitA+0xc>
 37c:	86 95       	lsr	r24
 37e:	71 05       	cpc	r23, r1
 380:	61 05       	cpc	r22, r1
 382:	08 94       	sec
 384:	08 95       	ret

00000386 <__fp_zero>:
 386:	e8 94       	clt

00000388 <__fp_szero>:
 388:	bb 27       	eor	r27, r27
 38a:	66 27       	eor	r22, r22
 38c:	77 27       	eor	r23, r23
 38e:	cb 01       	movw	r24, r22
 390:	97 f9       	bld	r25, 7
 392:	08 95       	ret

00000394 <__gesf2>:
 394:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fp_cmp>
 398:	08 f4       	brcc	.+2      	; 0x39c <__gesf2+0x8>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__mulsf3>:
 39e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__mulsf3x>
 3a2:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_round>
 3a6:	0e 94 45 02 	call	0x48a	; 0x48a <__fp_pscA>
 3aa:	38 f0       	brcs	.+14     	; 0x3ba <__mulsf3+0x1c>
 3ac:	0e 94 4c 02 	call	0x498	; 0x498 <__fp_pscB>
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__mulsf3+0x1c>
 3b2:	95 23       	and	r25, r21
 3b4:	11 f0       	breq	.+4      	; 0x3ba <__mulsf3+0x1c>
 3b6:	0c 94 3c 02 	jmp	0x478	; 0x478 <__fp_inf>
 3ba:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_nan>
 3be:	11 24       	eor	r1, r1
 3c0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__fp_szero>

000003c4 <__mulsf3x>:
 3c4:	0e 94 a1 01 	call	0x342	; 0x342 <__fp_split3>
 3c8:	70 f3       	brcs	.-36     	; 0x3a6 <__mulsf3+0x8>

000003ca <__mulsf3_pse>:
 3ca:	95 9f       	mul	r25, r21
 3cc:	c1 f3       	breq	.-16     	; 0x3be <__mulsf3+0x20>
 3ce:	95 0f       	add	r25, r21
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	55 1f       	adc	r21, r21
 3d4:	62 9f       	mul	r22, r18
 3d6:	f0 01       	movw	r30, r0
 3d8:	72 9f       	mul	r23, r18
 3da:	bb 27       	eor	r27, r27
 3dc:	f0 0d       	add	r31, r0
 3de:	b1 1d       	adc	r27, r1
 3e0:	63 9f       	mul	r22, r19
 3e2:	aa 27       	eor	r26, r26
 3e4:	f0 0d       	add	r31, r0
 3e6:	b1 1d       	adc	r27, r1
 3e8:	aa 1f       	adc	r26, r26
 3ea:	64 9f       	mul	r22, r20
 3ec:	66 27       	eor	r22, r22
 3ee:	b0 0d       	add	r27, r0
 3f0:	a1 1d       	adc	r26, r1
 3f2:	66 1f       	adc	r22, r22
 3f4:	82 9f       	mul	r24, r18
 3f6:	22 27       	eor	r18, r18
 3f8:	b0 0d       	add	r27, r0
 3fa:	a1 1d       	adc	r26, r1
 3fc:	62 1f       	adc	r22, r18
 3fe:	73 9f       	mul	r23, r19
 400:	b0 0d       	add	r27, r0
 402:	a1 1d       	adc	r26, r1
 404:	62 1f       	adc	r22, r18
 406:	83 9f       	mul	r24, r19
 408:	a0 0d       	add	r26, r0
 40a:	61 1d       	adc	r22, r1
 40c:	22 1f       	adc	r18, r18
 40e:	74 9f       	mul	r23, r20
 410:	33 27       	eor	r19, r19
 412:	a0 0d       	add	r26, r0
 414:	61 1d       	adc	r22, r1
 416:	23 1f       	adc	r18, r19
 418:	84 9f       	mul	r24, r20
 41a:	60 0d       	add	r22, r0
 41c:	21 1d       	adc	r18, r1
 41e:	82 2f       	mov	r24, r18
 420:	76 2f       	mov	r23, r22
 422:	6a 2f       	mov	r22, r26
 424:	11 24       	eor	r1, r1
 426:	9f 57       	subi	r25, 0x7F	; 127
 428:	50 40       	sbci	r21, 0x00	; 0
 42a:	9a f0       	brmi	.+38     	; 0x452 <__mulsf3_pse+0x88>
 42c:	f1 f0       	breq	.+60     	; 0x46a <__stack+0xb>
 42e:	88 23       	and	r24, r24
 430:	4a f0       	brmi	.+18     	; 0x444 <__mulsf3_pse+0x7a>
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	bb 1f       	adc	r27, r27
 438:	66 1f       	adc	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	91 50       	subi	r25, 0x01	; 1
 440:	50 40       	sbci	r21, 0x00	; 0
 442:	a9 f7       	brne	.-22     	; 0x42e <__mulsf3_pse+0x64>
 444:	9e 3f       	cpi	r25, 0xFE	; 254
 446:	51 05       	cpc	r21, r1
 448:	80 f0       	brcs	.+32     	; 0x46a <__stack+0xb>
 44a:	0c 94 3c 02 	jmp	0x478	; 0x478 <__fp_inf>
 44e:	0c 94 c4 01 	jmp	0x388	; 0x388 <__fp_szero>
 452:	5f 3f       	cpi	r21, 0xFF	; 255
 454:	e4 f3       	brlt	.-8      	; 0x44e <__mulsf3_pse+0x84>
 456:	98 3e       	cpi	r25, 0xE8	; 232
 458:	d4 f3       	brlt	.-12     	; 0x44e <__mulsf3_pse+0x84>
 45a:	86 95       	lsr	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b7 95       	ror	r27
 462:	f7 95       	ror	r31
 464:	e7 95       	ror	r30
 466:	9f 5f       	subi	r25, 0xFF	; 255
 468:	c1 f7       	brne	.-16     	; 0x45a <__mulsf3_pse+0x90>
 46a:	fe 2b       	or	r31, r30
 46c:	88 0f       	add	r24, r24
 46e:	91 1d       	adc	r25, r1
 470:	96 95       	lsr	r25
 472:	87 95       	ror	r24
 474:	97 f9       	bld	r25, 7
 476:	08 95       	ret

00000478 <__fp_inf>:
 478:	97 f9       	bld	r25, 7
 47a:	9f 67       	ori	r25, 0x7F	; 127
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	08 95       	ret

00000484 <__fp_nan>:
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	80 ec       	ldi	r24, 0xC0	; 192
 488:	08 95       	ret

0000048a <__fp_pscA>:
 48a:	00 24       	eor	r0, r0
 48c:	0a 94       	dec	r0
 48e:	16 16       	cp	r1, r22
 490:	17 06       	cpc	r1, r23
 492:	18 06       	cpc	r1, r24
 494:	09 06       	cpc	r0, r25
 496:	08 95       	ret

00000498 <__fp_pscB>:
 498:	00 24       	eor	r0, r0
 49a:	0a 94       	dec	r0
 49c:	12 16       	cp	r1, r18
 49e:	13 06       	cpc	r1, r19
 4a0:	14 06       	cpc	r1, r20
 4a2:	05 06       	cpc	r0, r21
 4a4:	08 95       	ret

000004a6 <__fp_round>:
 4a6:	09 2e       	mov	r0, r25
 4a8:	03 94       	inc	r0
 4aa:	00 0c       	add	r0, r0
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <__fp_round+0xc>
 4ae:	88 23       	and	r24, r24
 4b0:	52 f0       	brmi	.+20     	; 0x4c6 <__fp_round+0x20>
 4b2:	bb 0f       	add	r27, r27
 4b4:	40 f4       	brcc	.+16     	; 0x4c6 <__fp_round+0x20>
 4b6:	bf 2b       	or	r27, r31
 4b8:	11 f4       	brne	.+4      	; 0x4be <__fp_round+0x18>
 4ba:	60 ff       	sbrs	r22, 0
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__fp_round+0x20>
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	8f 4f       	sbci	r24, 0xFF	; 255
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
